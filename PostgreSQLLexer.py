# Generated from PostgreSQL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,182,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,5,18,142,8,18,10,18,12,18,145,9,18,1,19,4,19,148,8,19,11,19,
        12,19,149,1,20,1,20,5,20,154,8,20,10,20,12,20,157,9,20,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,4,27,177,8,27,11,27,12,27,178,1,27,1,27,0,0,28,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,1,0,39,39,3,0,9,10,13,13,32,32,185,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,61,1,0,0,
        0,7,63,1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,74,1,0,0,0,15,79,1,
        0,0,0,17,85,1,0,0,0,19,94,1,0,0,0,21,103,1,0,0,0,23,109,1,0,0,0,
        25,113,1,0,0,0,27,116,1,0,0,0,29,119,1,0,0,0,31,124,1,0,0,0,33,128,
        1,0,0,0,35,136,1,0,0,0,37,139,1,0,0,0,39,147,1,0,0,0,41,151,1,0,
        0,0,43,160,1,0,0,0,45,162,1,0,0,0,47,164,1,0,0,0,49,166,1,0,0,0,
        51,169,1,0,0,0,53,172,1,0,0,0,55,176,1,0,0,0,57,58,5,59,0,0,58,2,
        1,0,0,0,59,60,5,44,0,0,60,4,1,0,0,0,61,62,5,42,0,0,62,6,1,0,0,0,
        63,64,5,40,0,0,64,8,1,0,0,0,65,66,5,41,0,0,66,10,1,0,0,0,67,68,5,
        83,0,0,68,69,5,69,0,0,69,70,5,76,0,0,70,71,5,69,0,0,71,72,5,67,0,
        0,72,73,5,84,0,0,73,12,1,0,0,0,74,75,5,70,0,0,75,76,5,82,0,0,76,
        77,5,79,0,0,77,78,5,77,0,0,78,14,1,0,0,0,79,80,5,87,0,0,80,81,5,
        72,0,0,81,82,5,69,0,0,82,83,5,82,0,0,83,84,5,69,0,0,84,16,1,0,0,
        0,85,86,5,71,0,0,86,87,5,82,0,0,87,88,5,79,0,0,88,89,5,85,0,0,89,
        90,5,80,0,0,90,91,5,32,0,0,91,92,5,66,0,0,92,93,5,89,0,0,93,18,1,
        0,0,0,94,95,5,79,0,0,95,96,5,82,0,0,96,97,5,68,0,0,97,98,5,69,0,
        0,98,99,5,82,0,0,99,100,5,32,0,0,100,101,5,66,0,0,101,102,5,89,0,
        0,102,20,1,0,0,0,103,104,5,76,0,0,104,105,5,73,0,0,105,106,5,77,
        0,0,106,107,5,73,0,0,107,108,5,84,0,0,108,22,1,0,0,0,109,110,5,65,
        0,0,110,111,5,78,0,0,111,112,5,68,0,0,112,24,1,0,0,0,113,114,5,79,
        0,0,114,115,5,82,0,0,115,26,1,0,0,0,116,117,5,73,0,0,117,118,5,83,
        0,0,118,28,1,0,0,0,119,120,5,78,0,0,120,121,5,85,0,0,121,122,5,76,
        0,0,122,123,5,76,0,0,123,30,1,0,0,0,124,125,5,78,0,0,125,126,5,79,
        0,0,126,127,5,84,0,0,127,32,1,0,0,0,128,129,5,66,0,0,129,130,5,69,
        0,0,130,131,5,84,0,0,131,132,5,87,0,0,132,133,5,69,0,0,133,134,5,
        69,0,0,134,135,5,78,0,0,135,34,1,0,0,0,136,137,5,73,0,0,137,138,
        5,78,0,0,138,36,1,0,0,0,139,143,7,0,0,0,140,142,7,1,0,0,141,140,
        1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,38,1,
        0,0,0,145,143,1,0,0,0,146,148,7,2,0,0,147,146,1,0,0,0,148,149,1,
        0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,40,1,0,0,0,151,155,5,39,
        0,0,152,154,8,3,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,
        0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,159,5,39,
        0,0,159,42,1,0,0,0,160,161,5,61,0,0,161,44,1,0,0,0,162,163,5,60,
        0,0,163,46,1,0,0,0,164,165,5,62,0,0,165,48,1,0,0,0,166,167,5,60,
        0,0,167,168,5,61,0,0,168,50,1,0,0,0,169,170,5,62,0,0,170,171,5,61,
        0,0,171,52,1,0,0,0,172,173,5,60,0,0,173,174,5,62,0,0,174,54,1,0,
        0,0,175,177,7,4,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,
        0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,6,27,0,0,181,56,1,0,
        0,0,5,0,143,149,155,178,1,6,0,0
    ]

class PostgreSQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    SELECT = 6
    FROM = 7
    WHERE = 8
    GROUP_BY = 9
    ORDER_BY = 10
    LIMIT = 11
    AND = 12
    OR = 13
    IS = 14
    NULL = 15
    NOT = 16
    BETWEEN = 17
    IN = 18
    IDENTIFIER = 19
    NUMBER = 20
    STRING = 21
    EQUALS = 22
    LESS_THAN = 23
    GREATER_THAN = 24
    LESS_THAN_OR_EQUAL = 25
    GREATER_THAN_OR_EQUAL = 26
    NOT_EQUAL = 27
    WS = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'*'", "'('", "')'", "'SELECT'", "'FROM'", "'WHERE'", 
            "'GROUP BY'", "'ORDER BY'", "'LIMIT'", "'AND'", "'OR'", "'IS'", 
            "'NULL'", "'NOT'", "'BETWEEN'", "'IN'", "'='", "'<'", "'>'", 
            "'<='", "'>='", "'<>'" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "WHERE", "GROUP_BY", "ORDER_BY", "LIMIT", 
            "AND", "OR", "IS", "NULL", "NOT", "BETWEEN", "IN", "IDENTIFIER", 
            "NUMBER", "STRING", "EQUALS", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
            "GREATER_THAN_OR_EQUAL", "NOT_EQUAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "SELECT", "FROM", 
                  "WHERE", "GROUP_BY", "ORDER_BY", "LIMIT", "AND", "OR", 
                  "IS", "NULL", "NOT", "BETWEEN", "IN", "IDENTIFIER", "NUMBER", 
                  "STRING", "EQUALS", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
                  "GREATER_THAN_OR_EQUAL", "NOT_EQUAL", "WS" ]

    grammarFileName = "PostgreSQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


